var Tverio;(function ($) {    $(document).on('ready', function () {        Tverio.init();    });})(jQuery);// Main theme functions startTverio = {    defaults: {        log: false,        styleSwitcher: false,        animations: true,        onePageNav: true,        alwaysMobileMenuMode: false,        mobileMenuMaxWidth: 768,        smoothScroll: false,        smoothScrollSpeed: 800,        pseudoSelect: true,        ajaxedForm: true,        ajaxedFormSuccessMsg: 'Success',        ajaxedFormErrorMsg: 'An error occured. Please try again later.',        toastrPositionClass: 'toast-top-full-width'    },    mobileDevice: false,    log: function (msg) {        if (this.options.log) console.log('%cStartupLy Log: ' + msg, 'color: #1ac6ff');    },    // check if site is loaded from mobile device    checkMobile: function () {        // var mobileDeviceOld = this.mobileDevice;        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || $(window).width() < this.options.mobileMenuMaxWidth) {            this.mobileDevice = true;            this.log('Mobile device');        } else {            this.mobileDevice = false;            this.log('Desktop')        }    },    // init animations on page    initAnimations: function () {        var _this = this;        if (this.mobileDevice || !this.options.animations) {            $('.animated').css('opacity', 1);            this.log('Remove animations');            $('.animated .counter-block .count').not('.countdown .counter-block  .count').each(function () {                $(this).text($(this).data('to'));            });        } else if (typeof $.fn.appear == 'function') {            this.log('Init animations');            $('.animated').appear(function () {                var $el = $(this),                    animation = $el.data('animation'),                    animationDelay = $el.data('delay') || 0,                    animationDuration = $el.data('duration') || 1000;                if (_this.options.animations) {                    $el.css({                        '-webkit-animation-delay': animationDelay + 'ms',                        'animation-delay': animationDelay + 'ms',                        '-webkit-animation-duration': animationDuration / 1000 + 's',                        'animation-duration': animationDuration / 1000 + 's'                    });                    $el.addClass(animation);                    _this.log('Play animation ' + animation + ' with delay = ' + animationDelay + 'ms and duration = ' + animationDuration + 'ms');                    $el.one('webkitAnimationStart mozAnimationStart MSAnimationStart oanimationstart animationstart', function () {                        if (!$el.closest('.coundown').length) {                            if (typeof $.fn.countTo == 'function') {                                if ($el.find('.count').length) $el.find('.count').countTo();                            } else {                                _this.log('Can\'t find jQuery.countTo function');                            }                        }                    });                } else {                    $el.removeClass('animated');                    if (!$el.closest('.coundown').length) {                        if (typeof $.fn.countTo == 'function') {                            if ($el.find('.count').length) $el.find('.count').countTo();                        } else {                            _this.log('Can\'t find jQuery.countTo function');                        }                    }                }            }, {accY: -150});        } else {            $('.animated').css('opacity', 1);            this.log('Can\'t find jQuery.appear function');            this.log('Remove animations');        }    },    calculateMenuSizes: function () {        var _this = this,            $dropdownItem = $('.navigation-item.dropdown'),            $navbarCollapse = $('.navbar-collapse'),            winHeight = window.innerHeight;        if ($dropdownItem.length) {            $dropdownItem.each(function () {                var $this = $(this),                    $dropdown = $this.find('.dropdown-menu'),                    headerHeight = $dropdownItem.closest('header').outerHeight();                if (!_this.mobileDevice) {                    $dropdown.css('max-height', winHeight - headerHeight - 50);                } else {                    $dropdown.css('max-height', '');                }            });        }        if ($navbarCollapse.length) {            $navbarCollapse.each(function () {                if (_this.mobileDevice) {                    var headerHeight = $(this).closest('header').outerHeight();                    $(this).css('max-height', winHeight - headerHeight);                }            });        }    },    windowHeightBlock: function () {        var $blocks = $('.window-height'),            height = window.innerHeight;        if ($blocks.length) {            $blocks.each(function () {                $(this).css('min-height', height);            });        }        this.log('Init window height blocks');    },    centeredBlock: function () {        var $blocks = $('.centered-block');        if ($blocks.length) {            $blocks.each(function () {                var $el = $(this),                    $parent = $el.parent(),                    elHeight = $el.outerHeight(),                    parentHeight = $parent.outerHeight(),                    padding = (parentHeight - elHeight) / 2;                if (padding >= 0) {                    $parent.css({'padding-top': padding, 'padding-bottom': 0});                }            });        }        this.log('Init centered blocks');    },    initPseudoSelect: function () {        var $select = $('select');        if ($select.length) {            $select.each(this.makePseudoSelect);        }    },    makePseudoSelect: function (i, el) {        var $el = $(el),            $options = $el.find('option'),            $pseudoSelect = $('<div class="pseudo-select"></div>'),            $input = $('<input type="text" />'),            $field = $('<span class="pseudo-select-field"></span>'),            $dropdown = $('<ul class="pseudo-select-dropdown"></ul>');        $options.each(function () {            $li = $('<li class="pseudo-select-dropdown-item"></li>');            $li.data('value', this.value);            $li.text(this.text);            if (this.disabled) $li.addClass('disabled');            if (this.selected) {                $li.addClass('selected');                $field.text(this.text);                $input.attr('value', this.value);            }            $dropdown.append($li);        });        $el.after($pseudoSelect);        $input.attr({id: el.id, name: el.name});        $pseudoSelect.append($input).append($field).append($dropdown);        $el.remove();        var closePseudoSelect = function () {                $dropdown.stop(true, true).slideUp(150);                setTimeout(function () {                    $el.removeClass('open');                }, 150);            },            openPseudoSelect = function () {                $el.addClass('open');                $dropdown.stop(true, true).slideDown(250);            },            selectItem = function ($li) {                var value = $li.data('value'),                    text = $li.text(),                    dropdownHeight = $dropdown.outerHeight(),                    elHeight = $li.outerHeight(),                    scrollTop = $dropdown.scrollTop(),                    elemPosition = $li.position().top;                if (elemPosition + elHeight > dropdownHeight) {                    $dropdown.scrollTop(elHeight + elemPosition - dropdownHeight + scrollTop);                } else if (elemPosition < 0) {                    $dropdown.scrollTop(scrollTop + elemPosition);                }                $li.addClass('selected').siblings('li').removeClass('selected');                $input.val(value);                $field.text(text);                $input.trigger('change');            };        $input.on('focus.pseudoSelect', openPseudoSelect);        $input.on('blur.pseudoSelect', closePseudoSelect);        $input.on('keydown', function (event) {            var $li = $dropdown.find('li').not('.disabled'),                $liSelected = $dropdown.find('li.selected').not('.disabled'),                index = $.map($li, function (el, i) {                    if ($(el).is('.selected')) {                        return i;                    }                })[0],                nextIndex = (index < $li.length - 1) ? index + 1 : 0,                prevIndex = index - 1,                $prev = $li.eq(prevIndex),                $next = $li.eq(nextIndex);            if (event.keyCode == 38) {                if ($liSelected.length) {                    selectItem($prev);                } else {                    selectItem($li.last());                }            }            if (event.keyCode == 40) {                if ($liSelected.length) {                    selectItem($next);                } else {                    selectItem($li.first());                }            }            if (event.keyCode == 32) {                if ($el.is('.open')) closePseudoSelect();                else openPseudoSelect();            }            if (event.keyCode != 13 && event.keyCode != 9) {                return false;            }        });        $field.on('click.pseudoSelect', function (event) {            event.preventDefault();            if (!$el.is('.open')) $input.trigger('focus');        });        $('body').on('click.pseudoSelect', function (event) {            if (!$(event.target).closest($field).length && $el.is('.open')) closePseudoSelect();        });        $dropdown.on('mousedown.pseudoSelect click.pseudoSelect', 'li', function (event) {            event.preventDefault();            selectItem($(this));            closePseudoSelect();        });        return $input;    },    // Tabs view    tabNavToSelect: function () {        var $nav = $('.nav');        // var _this = this;        $nav.each(function () {            var $this = $(this),                $active = $this.find('li.active > a'),                $field = $('<span class="nav-current">' + $active.html() + '</span>');            $this.wrapAll('<div class="nav-wrapper"></div>');            $this.before($field);            $field.on('click', function () {                if (!$this.is('.open')) $this.stop(true, true).slideDown(250).addClass('open');                else $this.stop(true, true).slideUp(150).removeClass('open');            });            $this.on('click', 'a', function () {                $field.html($(this).html());            });            $('body').on('click', function (event) {                var $target = $(event.target);                if (!$target.closest($field).length && $this.is('.open')) {                    $this.stop(true, true).slideUp(150).removeClass('open');                }            });        });    },    masonryInit: function () {        // var _this = this;        var $masonry = $('.masonry');        if ($masonry.length && typeof $.fn.masonry == 'function') {            $masonry.each(function () {                var $container = $(this);                $container.masonry({                    itemSelector: '.masonry-item',                    isAnimated: true,                    columnWidth: function (containerWidth) {                        if (containerWidth > 720) {                            $container.removeClass('width400').removeClass('width720');                            return containerWidth / 4;                        } else if (containerWidth > 400) {                            $container.addClass('width720').removeClass('width400');                            if ($container.is('.speakers')) return containerWidth / 2;                            else return containerWidth / 3;                        } else {                            $container.addClass('width400').removeClass('width720');                            if ($container.is('.speakers')) return containerWidth;                            else return containerWidth / 2;                        }                    }                });            });        }    },    //sticky menu initialization    stickMenu: function () {        var $header = $('header');        $header.css('min-height', $header.height());        $header.addClass('fixed');        $('.fade-in-on-stick').fadeIn();    },    unstickMenu: function () {        var $header = $('header');        $header.removeClass('fixed');        $header.css('min-height', '');        $('.fade-in-on-stick').fadeOut();    },    //one page menu navigation    onePageNavInit: function () {        var _this = this;        if (typeof $.fn.waypoint != 'undefined') {            var $menuLinks = $('.navigation-list a').not('[href="#"]').filter(function () {                    return /#\w+/.test(this.href);                }),                enterHandler = function (that, direction) {                    var id = that.id,                        $item = $('.navigation-list a').filter(function () {                            return this.href.indexOf('#' + that.id) > -1;                        });                    $('.navigation-list .active').removeClass('active');                    $item.addClass('active');                    // push anchor to browser URL                    if (_this.options.onePageNavHashChange) {                        if (history.pushState) {                            history.pushState(null, null, '#' + id);                        } else {                            _this.log('Browser don\'t support history API');                        }                    }                },                leaveHandler = function (that, direction) {                    var $item = $('.navigation-list a').filter(function () {                        return this.href.indexOf('#' + that.id) > -1;                    });                    $item.removeClass('active');                };            $menuLinks.each(function (index) {                var href = this.href,                    anchorId = href.substring(href.indexOf('#'), href.length),                    $block = $(anchorId);                if ($block.length) {                    $block.waypoint(function (direction) {                        if (direction == 'down') {                            enterHandler(this.element, direction);                        }                    }, {offset: 0});                    $block.waypoint(function (direction) {                        if (direction == 'down') {                            leaveHandler(this.element, direction);                        } else {                            enterHandler(this.element, direction);                        }                    }, {offset: -$block.outerHeight()});                    $block.waypoint(function (direction) {                        if (direction == 'up') {                            leaveHandler(this.element, direction);                        }                    }, {offset: '100%'});                }            });            $('body').waypoint(function () {                var id = 'hero',                    $item = $('.navigation-list a[href="#' + id + '"]');                $('.navigation-list .active').removeClass('active');                if ($item.length) {                    $item.addClass('active');                    if (_this.options.onePageNavHashChange) {                        if (history.pushState) {                            history.pushState(null, null, '#' + id);                        } else {                            _this.log('Browser don\'t support history API');                        }                    }                }            }, {offset: -100});            $('body').on('click', 'a[href*="#"]', function (event) {                var href = $(this).attr('href'),                    anchorId = href.substring(href.indexOf('#'), href.length);                if ($(this).attr('data-toggle') && $(this).attr('data-toggle').length) {                    return;                }                if ($(anchorId).length) {                    _this.anchorClickHandler(anchorId);                    return false;                }            });        } else {            this.log('Can\'t find jQuery.waypoint function');        }    },    //custom smooth scrolling for all onpage anchors    anchorClickHandler: function (anchorId) {        var _this = this,            offsetTop = $(anchorId).offset().top - $('.header').height(),            $nav = $('.navigation-list'),            $elems = $nav.find('a[href="' + anchorId + '"]');        $('body, html').animate({            scrollTop: offsetTop        }, 450, function () {            if (_this.options.onePageNavHashChange) {                if (history.pushState) {                    history.pushState(null, null, anchorId);                } else {                    window.location.hash = anchorId;                }            }            $nav.find('.active').removeClass('active');            $elems.addClass('active');        });    },    checkHeaderStatus: function () {        if ($('header').length) {            var $header = $('header'),                scrollTop = $(window).scrollTop(),                headerTop = $header.offset().top;            if (scrollTop >= headerTop) {                this.stickMenu();            } else {                this.unstickMenu();            }        }    },    // onload handler    windowLoadHeandler: function (event) {        this.log('Window load handler');        if (window.location.hash.length) {            this.anchorClickHandler(window.location.hash);        }        if (this.options.onePageNav) {            this.onePageNavInit();        }        this.checkHeaderStatus();        this.masonryInit();        this.hidePreloader();    },    //on resize handler    windowResizeHandler: function (event) {        this.checkMobile();        this.windowHeightBlock();        this.centeredBlock();        this.calculateMenuSizes();    },    //on scroll handler    windowScrollHandler: function (event) {        this.checkHeaderStatus();    },    // small back-to-top link function    backToTopHandler: function () {        $('html, body').animate({            scrollTop: 0,            easing: 'swing'        }, 750);    },    setEventHandlers: function () {        var _this = this;        $(window).on('load', function (event) {            _this.windowLoadHeandler(event);        });        $(window).on('resize', function (event) {            _this.windowResizeHandler(event);        });        $(window).on('scroll', function (event) {            _this.windowScrollHandler(event);        });        $('.back-to-top').on('click', function (event) {            event.preventDefault();            _this.backToTopHandler();        });        $('.navbar-collapse').on('mousewheel DOMMouseScroll', function (event) {            if (_this.mobileDevice) {                var e0 = event.originalEvent,                    delta = e0.wheelDelta || -e0.detail;                this.scrollTop -= delta;                event.preventDefault();            }        });        this.log('Set event hendlers');    },    hidePreloader: function (callback) {        var _this = this;        $('.preloader-mask').delay(500).fadeOut(600);        setTimeout(function () {            _this.initAnimations();        }, 700);        if (callback) {            callback();        }    },    init: function (options) {        this.options = $.extend(this.defaults, options, $('body').data());        this.log('Init');        this.checkMobile();        this.tabNavToSelect();        // if (this.options.smoothScroll) this.smoothScrollInit();        if (this.options.pseudoSelect) this.initPseudoSelect();        this.windowHeightBlock();        this.centeredBlock();        this.calculateMenuSizes();        // this.gallerySliderInit();        this.setEventHandlers();    }};